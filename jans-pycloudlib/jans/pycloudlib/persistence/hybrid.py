"""
jans.pycloudlib.persistence.hybrid
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This module contains various helpers related to hybrid (LDAP + Couchbase) persistence.
"""

from collections import defaultdict

from jans.pycloudlib.persistence.utils import RDN_MAPPING, resolve_persistence_data_mapping


def render_hybrid_properties(dest: str) -> None:
    """Render file contains properties to connect to hybrid
    persistence, i.e. ``/etc/jans/conf/jans-hybrid.properties``.

    :param dest: Absolute path where generated file is located.
    """
    data_mapping = resolve_persistence_data_mapping()
    hybrid_storages = resolve_hybrid_storages(data_mapping)

    out = "\n".join([
        f"{k}: {v}" for k, v in hybrid_storages.items()
    ])

    with open(dest, "w") as fw:
        fw.write(out)


def resolve_hybrid_storages(data_mapping: dict) -> dict:
    """
    Resolve hybrid storage configuration.

    :param data_mapping: Persistence data mapping, usually generated by
        ``.utils.resolve_persistence_data_mapping``.
    """
    ctx = {
        # unique storage names
        "storages": ", ".join(sorted(set(
            data_mapping.values())
        )),
        "storage.default": data_mapping["default"],
    }

    mapper = defaultdict(list)
    for k, v in sorted(data_mapping.items()):
        mapper[v].append(RDN_MAPPING[k])

    # sort by persistence type
    mapper = dict(sorted(mapper.items()))

    for k, v in mapper.items():
        # remove empty value (if any)
        values = [val for val in v if val]
        if not values:
            continue
        ctx[f"storage.{k}.mapping"] = ", ".join(values)
    return ctx
